*** 1- Introduction ***
**Lecture Notes: NPM (Node Package Manager)**

---

### 1. Introduction to NPM

* **NPM** stands for **Node Package Manager**.
* It is both:

  1. A **command-line tool** used for managing Node.js packages.
  2. A **registry** that hosts third-party libraries and modules.

NPM allows developers to easily add functionality to Node.js applications through reusable open-source packages.

---

### 2. NPM Registry Overview

* The official NPM registry website is **[npmjs.com](https://www.npmjs.com)**.
* It contains hundreds of thousands of free, reusable Node modules.
* As of the lecture’s recording, there were **about 475,000 packages** available.
* These packages act as **building blocks** for Node.js applications.
* Developers can also **create and publish their own Node modules** to share with others.

---

### 3. Using NPM Command-Line Tool

* NPM is automatically installed with **Node.js**.
* To check your installed NPM version:

  -------------------code----------------------
  npm -v
  -------------------code----------------------
* To check your Node.js version:

  -------------------code----------------------
  node -v
  -------------------code----------------------

  Note that **Node.js and NPM have independent version numbers** since they are developed separately.

---

### 4. Matching NPM Versions

* Your NPM version might differ from the one used in the tutorial.
* To match the instructor’s version (**5.5.1**), you can install it globally using:

  -------------------code----------------------
  npm i -g npm@5.5.1
  -------------------code----------------------

  * `i` stands for **install**.
  * `-g` means install **globally**, not limited to a single project.
  * `@5.5.1` specifies the exact version number.

---

### 5. Permissions and Installation Notes

* **Mac users:**

  * If you encounter permission errors when installing globally, use `sudo`:

    -------------------code----------------------
    sudo npm i -g npm@5.5.1
    -------------------code----------------------
  * You’ll need to enter your system password.
* **Windows users:**

  * Run the **Command Prompt as Administrator** if you get permission errors.

---

### 6. Verifying the Installation

After installation, confirm the version with:

-------------------code----------------------
npm -v
-------------------code----------------------

You should now see:

-------------------code----------------------
5.5.1
-------------------code----------------------

---

### Summary

* **NPM** is the essential tool for managing and sharing Node.js packages.
* It enables quick integration of open-source modules into your applications.
* You can both **consume** existing packages and **publish** your own.
* Always ensure your NPM version matches your project or tutorial environment to avoid compatibility issues.

---

*** 2- Package.json ***
**Lecture Notes: Creating a Node Project and `package.json`**

---

### 1. Setting Up the Project Folder

* Create a new folder named **`npm-demo`**.
* This folder will be used throughout the section for demonstrations.
* Navigate into the folder using the terminal:

  -------------------code----------------------
  cd npm-demo
  -------------------code----------------------

---

### 2. The Role of `package.json`

* The **`package.json`** file is a **JSON file** that contains metadata about your Node.js application.

* It includes important information such as:

  * **Name** of the project
  * **Version**
  * **Description**
  * **Author**
  * **License**
  * **Git repository address**
  * **Dependencies** (external packages your project uses)

* Every Node.js project should have a `package.json` file.
  It defines the configuration and dependencies of the project in a standardized way.

---

### 3. Creating `package.json`

* To create this file, run:

  -------------------code----------------------
  npm init
  -------------------code----------------------

* This command will start an **interactive setup process** that asks a series of questions:

  1. **Package name:** Default is the current folder name (`npm-demo`).
  2. **Version:** Default is `1.0.0`.
  3. **Description:** Optional project description.
  4. **Entry point:** Default is `index.js`.
  5. **Test command:** Optional (can be left blank).
  6. **Git repository:** Optional (for version control).
  7. **Keywords:** Optional (for search tags).
  8. **Author:** Your name or organization.
  9. **License:** Default is usually `ISC`.

* After you answer these questions, NPM will display a **preview** of the generated JSON object:

  -------------------code----------------------
  {
    "name": "npm-demo",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "author": "",
    "license": "ISC"
  }
  -------------------code----------------------

* Confirm by pressing **Enter**, and the file will be created.

---

### 4. Best Practice

* Always create a **`package.json`** file before adding any Node packages.
* It allows NPM to record and manage your project’s dependencies properly.
* In summary:

  * Before installing any Node modules, **run**:

    -------------------code----------------------
    npm init
    -------------------code----------------------

---

### 5. Creating `package.json` Quickly

* You can skip the interactive questions by adding the **`--yes`** (or `-y`) flag:

  -------------------code----------------------
  npm init --yes
  -------------------code----------------------
* This command creates a `package.json` file instantly using **default values**.

---

### 6. Next Step

* Once your project has a `package.json` file, you can proceed to **install Node packages** using NPM commands.
* The next part of the lecture covers **how to install a Node package**.

*** 3- Installing a Node Package ***
**Lecture Notes: Installing Third-Party Node Packages**

---

### 1. Introduction

* In this lecture, we learn how to **add third-party libraries** (or Node packages) to a Node.js application.
* Example package: **Underscore**, a popular JavaScript utility library.

---

### 2. Exploring Packages on NPM

* Visit **[npmjs.com](https://www.npmjs.com)** and search for **“underscore”**.
* You’ll find the **Underscore** package, with the latest version (in this example) being **1.8.3**.
* On the package page, you can view:

  * **Installation command**
  * **Publisher information**
  * **Latest version**
  * **GitHub repository**
  * **Official homepage:** [underscorejs.org](https://underscorejs.org)
  * **Collaborators**
  * **Download statistics** and other metadata

**Tip:**
Whenever you need a Node package, start by checking **npmjs.com** for documentation and usage details.

---

### 3. Installing a Package

* In the terminal, you can install a package using:

  -------------------code----------------------
  npm install underscore
  -------------------code----------------------

  or the shorthand:

  -------------------code----------------------
  npm i underscore
  -------------------code----------------------

#### What Happens When You Run This:

1. **NPM downloads** the specified package from the **NPM registry**.
2. It **adds the package information** to your project’s **`package.json`** under the `dependencies` section:

   -------------------code----------------------
   "dependencies": {
     "underscore": "^1.8.3"
   }
   -------------------code----------------------
3. It **creates (or updates)** a folder named **`node_modules`**, which contains all installed packages.

   * Inside `node_modules/underscore/`, you’ll find various files including its own **`package.json`** file.

---

### 4. Understanding the Dependency Structure

* The `package.json` inside each module (like Underscore) contains metadata about that package:

  * **Version** (e.g., 1.8.3)
  * **Description**
  * **Homepage**
  * **Keywords**
  * **License**, etc.

This structure allows Node.js and NPM to manage each package independently.

---

### 5. The `--save` Flag (Old Behavior)

* In older versions of NPM, you had to include the `--save` flag when installing packages:

  -------------------code----------------------
  npm install underscore --save
  -------------------code----------------------

  * Without `--save`, the dependency was not recorded in `package.json`.
* **Modern versions of NPM** automatically update `package.json` when you install a package.
  The `--save` flag is **no longer required**.

---

### 6. Summary

* To add a third-party package:

  1. Search for it on **npmjs.com** to understand its usage.
  2. Run `npm install package-name` to add it to your project.
  3. Check your **`package.json`** for updated dependencies.
  4. Verify the **`node_modules`** folder contains the installed package.

---

**Next Lecture:**
How to use installed Node packages (like Underscore) in your application code.

*** 4- Using a Package ***
**Lecture Notes: Using Third-Party Node Modules (Example: Underscore Library)**

---

### 1. Introduction

* After installing a third-party Node module (like **Underscore**), the next step is to **use it in your application**.
* In this example, we demonstrate how to load and use the **Underscore** library in a simple Node.js script.

---

### 2. Creating the Entry File

* Inside the project root (for example, `npm-demo`), create a new file:

  -------------------code----------------------
  index.js
  -------------------code----------------------

---

### 3. Loading the Module with `require()`

* In `index.js`, use the **`require()`** function to load the Underscore module:

  -------------------code----------------------
  var _ = require('underscore');
  -------------------code----------------------
* By convention, the variable name **`_`** is used to represent the Underscore library.

---

### 4. How `require()` Works

The **`require()`** function follows a sequence when resolving a module:

1. **Core Module Check**

   * It first checks if the specified module is a **core Node.js module** (like `fs`, `http`, or `path`).
   * Since there is no core module named `underscore`, it proceeds to the next step.

2. **Local File or Folder Check**

   * If the module name starts with `./`, `../`, or `/`, Node assumes it refers to a **local file or folder**.

   * Example:

     -------------------code----------------------
     require('./underscore')
     -------------------code----------------------

     would look for:

     * A file named `underscore.js` in the current folder, or
     * A folder named `underscore` containing a file `index.js`.

   * Since we do **not** have a local file or folder called `underscore`, Node continues.

3. **`node_modules` Folder Check**

   * Node finally checks inside the **`node_modules`** directory for a module named `underscore`.
   * If found, it loads that module.

This is the **module resolution process** in Node.js.

---

### 5. Using the Underscore Library

* Visit **[underscorejs.org](https://underscorejs.org)** for documentation and examples.
* The library provides many utility functions for arrays, objects, and collections.

**Example: Using the `contains` function**

-------------------code----------------------
var _ = require('underscore');

var result = _.contains([1, 2, 3], 2);
console.log(result);
-------------------code----------------------

* The `contains` method checks whether a given value exists in an array.
* It takes:

  * First argument: the array to search.
  * Second argument: the value to find.
* Returns a **boolean** (`true` or `false`).

---

### 6. Running the Script

* In the terminal, execute:

  -------------------code----------------------
  node index.js
  -------------------code----------------------
* Output:

  -------------------code----------------------
  true
  -------------------code----------------------
* This confirms that the **Underscore module** was successfully loaded and used.

---

### 7. Summary

* Use **`require()`** to load installed Node packages.
* The `require()` function resolves modules in this order:

  1. Core modules
  2. Local files/folders
  3. `node_modules` directory
* The **Underscore** library provides helpful utility methods such as `contains`.
* Running your script with `node filename.js` executes the Node application using these imported modules.

---

**Next Lecture:**
How to manage global packages and understand versioning in NPM.

*** 5- Package Dependencies ***
**Lecture Notes: Installing and Understanding Package Dependencies (Example: Mongoose)**

---

### 1. Exercise Overview

* The task: **Install a Node package called Mongoose**.
* **Mongoose** is a popular Node.js library used for working with **MongoDB** databases.
* You will learn about MongoDB later, but for now, the goal is to:

  1. Install the package.
  2. Inspect how it affects the **`package.json`** file and the **`node_modules`** folder.

---

### 2. Installing Mongoose

Run the following command in your terminal:

-------------------code----------------------
npm install mongoose
-------------------code----------------------

or using the shorthand:

-------------------code----------------------
npm i mongoose
-------------------code----------------------

* After installation:

  * The **`package.json`** file is automatically updated.
  * Under **`dependencies`**, a new entry appears:

    -------------------code----------------------json
    "dependencies": {
      "underscore": "^1.8.3",
      "mongoose": "^4.13.6"
    }
    -------------------code----------------------
  * The version shown here (4.13.6 in this example) may differ based on the latest release.

---

### 3. Exploring the `node_modules` Folder

* Open the **`node_modules`** folder after installing Mongoose.
* You will see many folders inside it — far more than just **`mongoose`** and **`underscore`**.
* Question: Why are there so many?

**Explanation:**

* These additional folders represent **dependencies of Mongoose**.
* When you install a Node package, NPM automatically installs all **packages that it depends on**.
* So while you explicitly installed **Mongoose**, it internally depends on several other packages (such as `mongodb`, `bson`, etc.), which are installed automatically.

---

### 4. How Dependency Storage Used to Work

In **older versions of NPM**, the dependency structure was **nested**:

* Each package stored its own dependencies inside its own `node_modules` folder.
* Example (old behavior):

  -------------------code----------------------
  node_modules/
  ├── underscore/
  │   └── node_modules/
  │       └── dependencyA/
  └── mongoose/
      └── node_modules/
          └── dependencyB/
  -------------------code----------------------
* This caused several problems:

  * **Duplicate packages**: The same dependency could be installed multiple times in different places.
  * **Deeply nested structures**, making it difficult to manage.
  * **Windows path length limitations**: Windows restricts the number of characters allowed in file paths, leading to errors with deeply nested folders.

---

### 5. How NPM Handles Dependencies Now (Modern Behavior)

In **newer versions of NPM**, this issue has been solved:

* All dependencies (both direct and indirect) are installed **flatly** under the root **`node_modules`** folder.

  -------------------code----------------------
  node_modules/
  ├── mongoose/
  ├── underscore/
  ├── mongodb/
  ├── bson/
  └── async/
  -------------------code----------------------
* This structure avoids duplication and long paths.

**However**, there is one important exception:

---

### 6. The Version Conflict Exception

* If two packages depend on **different versions** of the same dependency, NPM will install **multiple versions** as needed.

**Example:**

* Your application depends on:

  -------------------code----------------------
  async@1.x
  -------------------code----------------------
* Mongoose depends on:

  -------------------code----------------------
  async@2.x
  -------------------code----------------------

**Resulting structure:**

-------------------code----------------------
node_modules/
├── async/        → version 1 (used by your app)
├── mongoose/
│   └── node_modules/
│       └── async/ → version 2 (used internally by Mongoose)
-------------------code----------------------

So, the flat structure is used **as much as possible**, but NPM still installs local copies when version conflicts occur.

---

### 7. Summary

* Installing **Mongoose** adds both the package itself and all its dependencies.
* Modern NPM versions use a **flat dependency structure** to:

  * Reduce duplication.
  * Avoid deep nesting.
  * Prevent path length issues (especially on Windows).
* If two packages depend on **different versions** of the same dependency, NPM installs both versions — one globally under `node_modules` and one locally within the dependent package’s folder.

---

**Key Commands Reviewed**

-------------------code----------------------
npm install mongoose        # Install Mongoose and dependencies
npm list                    # View dependency tree
npm list --depth=0          # View only top-level dependencies
-------------------code----------------------

---

**Next Lecture:**
Understanding semantic versioning and the meaning of symbols like the caret (`^`) and tilde (`~`) in `package.json`.
